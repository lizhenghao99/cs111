NAME: 	Zhenghao Li
EMAIL: 	lizhenghao99@g.ucla.edu
ID:		704971934

# Included files in tarball:

lab0.c: 		the source file
check.sh: 		script used for make check
Makefile: 		Makefile with targets: default, check, clean, dist
README: 		this file
backtrace.png: 	screenshot of gdb backtrace at segfault
breakpoint.png: screenshot of gdb preakpoint at segfault

# lab0.c:

This is the C source code implementing the copying from stdin to stdout function
with options --input=file --output=file --segfault --catch --dump-core.
Obstacles: I first expect the function to be implemented with direct copy from 
two indicated file descriptors, so I created a function copy(int in, int out).
However it seems the spec requires redirection to stdin and stdout and always
copy from 0 to 1. Thus the subroutine is now trivial. The most confusing part
of this lab is learning how to use the complex syntax of getopt. I spent most of
the time correcting syntax and logic errors due to inexperience with this API. 

# check.sh:

This is the test script invoked by make check. It checks for the correct exit
code for option combinations: 
--input
--output
--output --input
--randomOption
--segfault
--catch --segfault
--catch --dump-core --segfault 

# Makefile:

This is the Makefile supporting targes:
default: build executable lab0 from lab0.c
check: execute test script check.sh
dist: create tarball distribution
clean: remove lab0.o lab0 lab0-704971934.tar.gz

# content of smoke test script check.sh:

# !/bin/bash

# check for --input
echo "input text" > in.txt
./lab0 --input in.txt &>/dev/null
if [ $? -ne 0 ]
then
	echo "-i test failed" >> error.txt
else
	echo "-i test passed"
fi
rm -f in.txt

# check for --output
echo "output text" | ./lab0 --output out.txt
if [ $? -ne 0 ]
then
	echo "-o test failed" >> error.txt
else
	echo "-o test passed"
fi
rm -f out.txt

# check for --output --input
echo "inputoutput text" > in.txt
./lab0 --output out.txt --input in.txt
if [ $? -ne 0 ]
then 
	echo "-o -i test failed" >> error.txt
else
	echo "-o -i test passed"
fi
rm -f in.txt out.txt

# suppress error
exec 2> /dev/null

# check for unrecognized option
./lab0 --randomOption &>/dev/null
if [ $? -ne 1 ]
then 
	echo "invalid option test failed" >> error.txt
else
	echo "invalid option test passed"
fi

# check for --segfault
./lab0 --segfault &>/dev/null
if [ $? -ne 139 ]
then 
	echo "-s test failed" >> error.txt
else
	echo "-s test passed" 
fi

# check for --catch --segfault
./lab0 --catch --segfault &>/dev/null
if [ $? -ne 4 ]
then 
	echo "-c -s test failed" >> error.txt
else
	echo "-c -s test passed" 
fi

# check for --catch --dump-core --segfault
./lab0 --catch --dump-core --segfault &>/dev/null
if [ $? -ne 139 ]
then 
	echo "-c -d -s test failed" >> error.txt
else
	echo "-c -d -s test passed"
fi

# result
if [ -e error.txt ]
then
	cat error.txt
	echo "smoke test FAILED!!!"
	rm -f error.txt
else
	echo "smoke test passed!"
fi
